// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyflixAPI.Models;

#nullable disable

namespace MyflixAPI.Migrations
{
    [DbContext(typeof(MyflixContext))]
    [Migration("20250622114415_InitialBaseline")]
    partial class InitialBaseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieActor", b =>
                {
                    b.Property<int>("MaMovieIdRef")
                        .HasColumnType("int")
                        .HasColumnName("MA_MovieIdRef");

                    b.Property<int>("MaActorIdRef")
                        .HasColumnType("int")
                        .HasColumnName("MA_ActorIdRef");

                    b.HasKey("MaMovieIdRef", "MaActorIdRef")
                        .HasName("PK__MovieAct__B27DAB4B1B32CDDC");

                    b.HasIndex("MaActorIdRef");

                    b.ToTable("MovieActor", (string)null);
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.Property<int>("MgMovieIdRef")
                        .HasColumnType("int")
                        .HasColumnName("MG_MovieIdRef");

                    b.Property<int>("MgGenreIdRef")
                        .HasColumnType("int")
                        .HasColumnName("MG_GenreIdRef");

                    b.HasKey("MgMovieIdRef", "MgGenreIdRef")
                        .HasName("PK__MovieGen__C3FDF31C0FF81787");

                    b.HasIndex("MgGenreIdRef");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("MyflixAPI.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"));

                    b.Property<string>("ActorBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActorProfilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ActorWiki")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId")
                        .HasName("PK__Actor__57B3EA4BC121430E");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("MyflixAPI.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GenreId")
                        .HasName("PK__Genre__0385057E387D70EE");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("MyflixAPI.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("MovieBackdropPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieOverview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MoviePopularity")
                        .HasColumnType("float");

                    b.Property<string>("MoviePosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("MovieReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("MovieTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("MovieVoteAverage")
                        .HasColumnType("float");

                    b.Property<int?>("MovieVoteCount")
                        .HasColumnType("int");

                    b.HasKey("MovieId")
                        .HasName("PK__Movie__4BD2941AABF55F6E");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("MyflixAPI.Models.Rating", b =>
                {
                    b.Property<int>("RatingMovieIdRef")
                        .HasColumnType("int")
                        .HasColumnName("Rating_MovieIdRef");

                    b.Property<string>("RatingUserIdRef")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Rating_UserIdRef");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("int");

                    b.HasKey("RatingMovieIdRef", "RatingUserIdRef")
                        .HasName("PK__Rating__EC9E00C03E6B34BF");

                    b.HasIndex("RatingUserIdRef");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("MyflixAPI.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime?>("ReviewCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ReviewMovieIdRef")
                        .HasColumnType("int")
                        .HasColumnName("Review_MovieIdRef");

                    b.Property<int?>("ReviewParentReviewIdRef")
                        .HasColumnType("int")
                        .HasColumnName("Review_ParentReviewIdRef");

                    b.Property<string>("ReviewText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewUserIdRef")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Review_UserIdRef");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__74BC79CE430FFC6A");

                    b.HasIndex("ReviewMovieIdRef");

                    b.HasIndex("ReviewParentReviewIdRef");

                    b.HasIndex("ReviewUserIdRef");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("MyflixAPI.Models.Watchlist", b =>
                {
                    b.Property<string>("WatchlistUserIdRef")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Watchlist_UserIdRef");

                    b.Property<int>("WatchlistMovieIdRef")
                        .HasColumnType("int")
                        .HasColumnName("Watchlist_MovieIdRef");

                    b.HasKey("WatchlistUserIdRef", "WatchlistMovieIdRef")
                        .HasName("PK__Watchlis__17B5527A5A4C79F0");

                    b.HasIndex("WatchlistMovieIdRef");

                    b.ToTable("Watchlist", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieActor", b =>
                {
                    b.HasOne("MyflixAPI.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("MaActorIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MA_Actor");

                    b.HasOne("MyflixAPI.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MaMovieIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MA_Movie");
                });

            modelBuilder.Entity("MovieGenre", b =>
                {
                    b.HasOne("MyflixAPI.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("MgGenreIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MG_Genre");

                    b.HasOne("MyflixAPI.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MgMovieIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MG_Movie");
                });

            modelBuilder.Entity("MyflixAPI.Models.Rating", b =>
                {
                    b.HasOne("MyflixAPI.Models.Movie", "RatingMovieIdRefNavigation")
                        .WithMany("Ratings")
                        .HasForeignKey("RatingMovieIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Rating_Movie");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("RatingUserIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Rating_User");

                    b.Navigation("RatingMovieIdRefNavigation");
                });

            modelBuilder.Entity("MyflixAPI.Models.Review", b =>
                {
                    b.HasOne("MyflixAPI.Models.Movie", "ReviewMovieIdRefNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewMovieIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Review_Movie");

                    b.HasOne("MyflixAPI.Models.Review", "ReviewParentReviewIdRefNavigation")
                        .WithMany("InverseReviewParentReviewIdRefNavigation")
                        .HasForeignKey("ReviewParentReviewIdRef")
                        .HasConstraintName("FK_Review_Parent");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("ReviewUserIdRef")
                        .HasConstraintName("FK_Review_User");

                    b.Navigation("ReviewMovieIdRefNavigation");

                    b.Navigation("ReviewParentReviewIdRefNavigation");
                });

            modelBuilder.Entity("MyflixAPI.Models.Watchlist", b =>
                {
                    b.HasOne("MyflixAPI.Models.Movie", "WatchlistMovieIdRefNavigation")
                        .WithMany("Watchlists")
                        .HasForeignKey("WatchlistMovieIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Watchlist_Movie");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("WatchlistUserIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Watchlist_User");

                    b.Navigation("WatchlistMovieIdRefNavigation");
                });

            modelBuilder.Entity("MyflixAPI.Models.Movie", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reviews");

                    b.Navigation("Watchlists");
                });

            modelBuilder.Entity("MyflixAPI.Models.Review", b =>
                {
                    b.Navigation("InverseReviewParentReviewIdRefNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
